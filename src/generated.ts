// Generated by @wagmi/cli@1.0.0 on 5/14/2023 at 10:21:21 PM
import {
  useNetwork,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  Address,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// FungibleTokenWrapper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export const fungibleTokenWrapperABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_name', internalType: 'string', type: 'string' },
      { name: '_symbol', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Paused',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Unpaused',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MINTER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'PAUSER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_tokenAddress', internalType: 'address', type: 'address' },
      { name: '_nonce', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'add',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnFrom',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'feePercentage',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'feeRecipient',
    outputs: [{ name: '', internalType: 'address payable', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_deposit', internalType: 'uint256', type: 'uint256' }],
    name: 'getAmountToWrap',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getFee',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_amountToWrap', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getFeeFromAmount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getProposalNonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getRoleMember',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleMemberCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTokens',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'handler',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'historicalTokens',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_feePercentage', internalType: 'uint16', type: 'uint16' },
      { name: '_feeRecipient', internalType: 'address', type: 'address' },
      { name: '_handler', internalType: 'address', type: 'address' },
      { name: '_limit', internalType: 'uint256', type: 'uint256' },
      { name: '_isNativeAllowed', internalType: 'bool', type: 'bool' },
      { name: '_admin', internalType: 'address', type: 'address' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isNativeAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tokenAddress', internalType: 'address', type: 'address' },
    ],
    name: 'isValidToken',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'pause',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proposalNonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_tokenAddress', internalType: 'address', type: 'address' },
      { name: '_nonce', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'remove',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_feePercentage', internalType: 'uint16', type: 'uint16' },
      { name: '_nonce', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'setFee',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_feeRecipient',
        internalType: 'address payable',
        type: 'address',
      },
      { name: '_nonce', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'setFeeRecipient',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_handler', internalType: 'address', type: 'address' }],
    name: 'setHandler',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_isNativeAllowed', internalType: 'bool', type: 'bool' }],
    name: 'setNativeAllowed',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'tokens',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'unpause',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenAddress', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'unwrap',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenAddress', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'recipient', internalType: 'address', type: 'address' },
    ],
    name: 'unwrapAndSendTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'tokenAddress', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'unwrapFor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_limit', internalType: 'uint256', type: 'uint256' }],
    name: 'updateLimit',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'tokenAddress', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'wrap',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'tokenAddress', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'wrapFor',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'tokenAddress', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'recipient', internalType: 'address', type: 'address' },
    ],
    name: 'wrapForAndSendTo',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'wrappingLimit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

/**
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export const fungibleTokenWrapperAddress = {
  5: '0x01EB50a7c42b525fA7c3BD340aB1f6F81257fE01',
  11155111: '0x01EB50a7c42b525fA7c3BD340aB1f6F81257fE01',
} as const

/**
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export const fungibleTokenWrapperConfig = {
  address: fungibleTokenWrapperAddress,
  abi: fungibleTokenWrapperABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fungibleTokenWrapperABI}__.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof fungibleTokenWrapperABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof fungibleTokenWrapperABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    ...config,
  } as UseContractReadConfig<
    typeof fungibleTokenWrapperABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperDefaultAdminRole<
  TFunctionName extends 'DEFAULT_ADMIN_ROLE',
  TSelectData = ReadContractResult<
    typeof fungibleTokenWrapperABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof fungibleTokenWrapperABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config,
  } as UseContractReadConfig<
    typeof fungibleTokenWrapperABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"MINTER_ROLE"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperMinterRole<
  TFunctionName extends 'MINTER_ROLE',
  TSelectData = ReadContractResult<
    typeof fungibleTokenWrapperABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof fungibleTokenWrapperABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'MINTER_ROLE',
    ...config,
  } as UseContractReadConfig<
    typeof fungibleTokenWrapperABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"PAUSER_ROLE"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperPauserRole<
  TFunctionName extends 'PAUSER_ROLE',
  TSelectData = ReadContractResult<
    typeof fungibleTokenWrapperABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof fungibleTokenWrapperABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'PAUSER_ROLE',
    ...config,
  } as UseContractReadConfig<
    typeof fungibleTokenWrapperABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"allowance"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<
    typeof fungibleTokenWrapperABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof fungibleTokenWrapperABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof fungibleTokenWrapperABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"balanceOf"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<
    typeof fungibleTokenWrapperABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof fungibleTokenWrapperABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof fungibleTokenWrapperABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"decimals"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<
    typeof fungibleTokenWrapperABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof fungibleTokenWrapperABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<
    typeof fungibleTokenWrapperABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"feePercentage"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperFeePercentage<
  TFunctionName extends 'feePercentage',
  TSelectData = ReadContractResult<
    typeof fungibleTokenWrapperABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof fungibleTokenWrapperABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'feePercentage',
    ...config,
  } as UseContractReadConfig<
    typeof fungibleTokenWrapperABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"feeRecipient"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperFeeRecipient<
  TFunctionName extends 'feeRecipient',
  TSelectData = ReadContractResult<
    typeof fungibleTokenWrapperABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof fungibleTokenWrapperABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'feeRecipient',
    ...config,
  } as UseContractReadConfig<
    typeof fungibleTokenWrapperABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"getAmountToWrap"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperGetAmountToWrap<
  TFunctionName extends 'getAmountToWrap',
  TSelectData = ReadContractResult<
    typeof fungibleTokenWrapperABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof fungibleTokenWrapperABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'getAmountToWrap',
    ...config,
  } as UseContractReadConfig<
    typeof fungibleTokenWrapperABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"getFee"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperGetFee<
  TFunctionName extends 'getFee',
  TSelectData = ReadContractResult<
    typeof fungibleTokenWrapperABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof fungibleTokenWrapperABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'getFee',
    ...config,
  } as UseContractReadConfig<
    typeof fungibleTokenWrapperABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"getFeeFromAmount"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperGetFeeFromAmount<
  TFunctionName extends 'getFeeFromAmount',
  TSelectData = ReadContractResult<
    typeof fungibleTokenWrapperABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof fungibleTokenWrapperABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'getFeeFromAmount',
    ...config,
  } as UseContractReadConfig<
    typeof fungibleTokenWrapperABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"getProposalNonce"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperGetProposalNonce<
  TFunctionName extends 'getProposalNonce',
  TSelectData = ReadContractResult<
    typeof fungibleTokenWrapperABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof fungibleTokenWrapperABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'getProposalNonce',
    ...config,
  } as UseContractReadConfig<
    typeof fungibleTokenWrapperABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"getRoleAdmin"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperGetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<
    typeof fungibleTokenWrapperABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof fungibleTokenWrapperABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof fungibleTokenWrapperABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"getRoleMember"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperGetRoleMember<
  TFunctionName extends 'getRoleMember',
  TSelectData = ReadContractResult<
    typeof fungibleTokenWrapperABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof fungibleTokenWrapperABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'getRoleMember',
    ...config,
  } as UseContractReadConfig<
    typeof fungibleTokenWrapperABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"getRoleMemberCount"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperGetRoleMemberCount<
  TFunctionName extends 'getRoleMemberCount',
  TSelectData = ReadContractResult<
    typeof fungibleTokenWrapperABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof fungibleTokenWrapperABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'getRoleMemberCount',
    ...config,
  } as UseContractReadConfig<
    typeof fungibleTokenWrapperABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"getTokens"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperGetTokens<
  TFunctionName extends 'getTokens',
  TSelectData = ReadContractResult<
    typeof fungibleTokenWrapperABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof fungibleTokenWrapperABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'getTokens',
    ...config,
  } as UseContractReadConfig<
    typeof fungibleTokenWrapperABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"handler"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperHandler<
  TFunctionName extends 'handler',
  TSelectData = ReadContractResult<
    typeof fungibleTokenWrapperABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof fungibleTokenWrapperABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'handler',
    ...config,
  } as UseContractReadConfig<
    typeof fungibleTokenWrapperABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"hasRole"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperHasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<
    typeof fungibleTokenWrapperABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof fungibleTokenWrapperABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<
    typeof fungibleTokenWrapperABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"historicalTokens"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperHistoricalTokens<
  TFunctionName extends 'historicalTokens',
  TSelectData = ReadContractResult<
    typeof fungibleTokenWrapperABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof fungibleTokenWrapperABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'historicalTokens',
    ...config,
  } as UseContractReadConfig<
    typeof fungibleTokenWrapperABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"initialized"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperInitialized<
  TFunctionName extends 'initialized',
  TSelectData = ReadContractResult<
    typeof fungibleTokenWrapperABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof fungibleTokenWrapperABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'initialized',
    ...config,
  } as UseContractReadConfig<
    typeof fungibleTokenWrapperABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"isNativeAllowed"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperIsNativeAllowed<
  TFunctionName extends 'isNativeAllowed',
  TSelectData = ReadContractResult<
    typeof fungibleTokenWrapperABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof fungibleTokenWrapperABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'isNativeAllowed',
    ...config,
  } as UseContractReadConfig<
    typeof fungibleTokenWrapperABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"isValidToken"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperIsValidToken<
  TFunctionName extends 'isValidToken',
  TSelectData = ReadContractResult<
    typeof fungibleTokenWrapperABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof fungibleTokenWrapperABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'isValidToken',
    ...config,
  } as UseContractReadConfig<
    typeof fungibleTokenWrapperABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"name"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<
    typeof fungibleTokenWrapperABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof fungibleTokenWrapperABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof fungibleTokenWrapperABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"paused"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperPaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<
    typeof fungibleTokenWrapperABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof fungibleTokenWrapperABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'paused',
    ...config,
  } as UseContractReadConfig<
    typeof fungibleTokenWrapperABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"proposalNonce"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperProposalNonce<
  TFunctionName extends 'proposalNonce',
  TSelectData = ReadContractResult<
    typeof fungibleTokenWrapperABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof fungibleTokenWrapperABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'proposalNonce',
    ...config,
  } as UseContractReadConfig<
    typeof fungibleTokenWrapperABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"supportsInterface"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<
    typeof fungibleTokenWrapperABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof fungibleTokenWrapperABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof fungibleTokenWrapperABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"symbol"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<
    typeof fungibleTokenWrapperABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof fungibleTokenWrapperABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof fungibleTokenWrapperABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"tokens"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperTokens<
  TFunctionName extends 'tokens',
  TSelectData = ReadContractResult<
    typeof fungibleTokenWrapperABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof fungibleTokenWrapperABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'tokens',
    ...config,
  } as UseContractReadConfig<
    typeof fungibleTokenWrapperABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"totalSupply"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<
    typeof fungibleTokenWrapperABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof fungibleTokenWrapperABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof fungibleTokenWrapperABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"wrappingLimit"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperWrappingLimit<
  TFunctionName extends 'wrappingLimit',
  TSelectData = ReadContractResult<
    typeof fungibleTokenWrapperABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof fungibleTokenWrapperABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'wrappingLimit',
    ...config,
  } as UseContractReadConfig<
    typeof fungibleTokenWrapperABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof fungibleTokenWrapperAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof fungibleTokenWrapperABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<
        typeof fungibleTokenWrapperABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof fungibleTokenWrapperABI, TFunctionName, TMode>(
    {
      abi: fungibleTokenWrapperABI,
      address:
        fungibleTokenWrapperAddress[
          chainId as keyof typeof fungibleTokenWrapperAddress
        ],
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"add"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperAdd<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof fungibleTokenWrapperAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof fungibleTokenWrapperABI,
          'add'
        >['request']['abi'],
        'add',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'add' }
    : UseContractWriteConfig<typeof fungibleTokenWrapperABI, 'add', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'add'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof fungibleTokenWrapperABI, 'add', TMode>({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'add',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"approve"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperApprove<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof fungibleTokenWrapperAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof fungibleTokenWrapperABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'approve' }
    : UseContractWriteConfig<
        typeof fungibleTokenWrapperABI,
        'approve',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'approve'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof fungibleTokenWrapperABI, 'approve', TMode>({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"burn"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperBurn<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof fungibleTokenWrapperAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof fungibleTokenWrapperABI,
          'burn'
        >['request']['abi'],
        'burn',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'burn' }
    : UseContractWriteConfig<typeof fungibleTokenWrapperABI, 'burn', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'burn'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof fungibleTokenWrapperABI, 'burn', TMode>({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"burnFrom"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperBurnFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof fungibleTokenWrapperAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof fungibleTokenWrapperABI,
          'burnFrom'
        >['request']['abi'],
        'burnFrom',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'burnFrom' }
    : UseContractWriteConfig<
        typeof fungibleTokenWrapperABI,
        'burnFrom',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'burnFrom'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof fungibleTokenWrapperABI, 'burnFrom', TMode>({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'burnFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"decreaseAllowance"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperDecreaseAllowance<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof fungibleTokenWrapperAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof fungibleTokenWrapperABI,
          'decreaseAllowance'
        >['request']['abi'],
        'decreaseAllowance',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'decreaseAllowance'
      }
    : UseContractWriteConfig<
        typeof fungibleTokenWrapperABI,
        'decreaseAllowance',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof fungibleTokenWrapperABI,
    'decreaseAllowance',
    TMode
  >({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"grantRole"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperGrantRole<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof fungibleTokenWrapperAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof fungibleTokenWrapperABI,
          'grantRole'
        >['request']['abi'],
        'grantRole',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'grantRole' }
    : UseContractWriteConfig<
        typeof fungibleTokenWrapperABI,
        'grantRole',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'grantRole'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof fungibleTokenWrapperABI, 'grantRole', TMode>({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"increaseAllowance"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperIncreaseAllowance<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof fungibleTokenWrapperAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof fungibleTokenWrapperABI,
          'increaseAllowance'
        >['request']['abi'],
        'increaseAllowance',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'increaseAllowance'
      }
    : UseContractWriteConfig<
        typeof fungibleTokenWrapperABI,
        'increaseAllowance',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof fungibleTokenWrapperABI,
    'increaseAllowance',
    TMode
  >({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"initialize"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperInitialize<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof fungibleTokenWrapperAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof fungibleTokenWrapperABI,
          'initialize'
        >['request']['abi'],
        'initialize',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'initialize' }
    : UseContractWriteConfig<
        typeof fungibleTokenWrapperABI,
        'initialize',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'initialize'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof fungibleTokenWrapperABI, 'initialize', TMode>({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"mint"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperMint<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof fungibleTokenWrapperAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof fungibleTokenWrapperABI,
          'mint'
        >['request']['abi'],
        'mint',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'mint' }
    : UseContractWriteConfig<typeof fungibleTokenWrapperABI, 'mint', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'mint'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof fungibleTokenWrapperABI, 'mint', TMode>({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"pause"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperPause<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof fungibleTokenWrapperAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof fungibleTokenWrapperABI,
          'pause'
        >['request']['abi'],
        'pause',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'pause' }
    : UseContractWriteConfig<typeof fungibleTokenWrapperABI, 'pause', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'pause'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof fungibleTokenWrapperABI, 'pause', TMode>({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'pause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"remove"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperRemove<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof fungibleTokenWrapperAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof fungibleTokenWrapperABI,
          'remove'
        >['request']['abi'],
        'remove',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'remove' }
    : UseContractWriteConfig<
        typeof fungibleTokenWrapperABI,
        'remove',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'remove'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof fungibleTokenWrapperABI, 'remove', TMode>({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'remove',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"renounceRole"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperRenounceRole<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof fungibleTokenWrapperAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof fungibleTokenWrapperABI,
          'renounceRole'
        >['request']['abi'],
        'renounceRole',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'renounceRole'
      }
    : UseContractWriteConfig<
        typeof fungibleTokenWrapperABI,
        'renounceRole',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'renounceRole'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof fungibleTokenWrapperABI,
    'renounceRole',
    TMode
  >({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"revokeRole"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperRevokeRole<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof fungibleTokenWrapperAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof fungibleTokenWrapperABI,
          'revokeRole'
        >['request']['abi'],
        'revokeRole',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'revokeRole' }
    : UseContractWriteConfig<
        typeof fungibleTokenWrapperABI,
        'revokeRole',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'revokeRole'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof fungibleTokenWrapperABI, 'revokeRole', TMode>({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"setFee"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperSetFee<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof fungibleTokenWrapperAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof fungibleTokenWrapperABI,
          'setFee'
        >['request']['abi'],
        'setFee',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setFee' }
    : UseContractWriteConfig<
        typeof fungibleTokenWrapperABI,
        'setFee',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setFee'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof fungibleTokenWrapperABI, 'setFee', TMode>({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'setFee',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"setFeeRecipient"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperSetFeeRecipient<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof fungibleTokenWrapperAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof fungibleTokenWrapperABI,
          'setFeeRecipient'
        >['request']['abi'],
        'setFeeRecipient',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setFeeRecipient'
      }
    : UseContractWriteConfig<
        typeof fungibleTokenWrapperABI,
        'setFeeRecipient',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setFeeRecipient'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof fungibleTokenWrapperABI,
    'setFeeRecipient',
    TMode
  >({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'setFeeRecipient',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"setHandler"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperSetHandler<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof fungibleTokenWrapperAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof fungibleTokenWrapperABI,
          'setHandler'
        >['request']['abi'],
        'setHandler',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setHandler' }
    : UseContractWriteConfig<
        typeof fungibleTokenWrapperABI,
        'setHandler',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setHandler'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof fungibleTokenWrapperABI, 'setHandler', TMode>({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'setHandler',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"setNativeAllowed"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperSetNativeAllowed<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof fungibleTokenWrapperAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof fungibleTokenWrapperABI,
          'setNativeAllowed'
        >['request']['abi'],
        'setNativeAllowed',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'setNativeAllowed'
      }
    : UseContractWriteConfig<
        typeof fungibleTokenWrapperABI,
        'setNativeAllowed',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setNativeAllowed'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof fungibleTokenWrapperABI,
    'setNativeAllowed',
    TMode
  >({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'setNativeAllowed',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"transfer"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperTransfer<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof fungibleTokenWrapperAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof fungibleTokenWrapperABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'transfer' }
    : UseContractWriteConfig<
        typeof fungibleTokenWrapperABI,
        'transfer',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transfer'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof fungibleTokenWrapperABI, 'transfer', TMode>({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"transferFrom"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperTransferFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof fungibleTokenWrapperAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof fungibleTokenWrapperABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'transferFrom'
      }
    : UseContractWriteConfig<
        typeof fungibleTokenWrapperABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferFrom'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof fungibleTokenWrapperABI,
    'transferFrom',
    TMode
  >({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"unpause"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperUnpause<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof fungibleTokenWrapperAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof fungibleTokenWrapperABI,
          'unpause'
        >['request']['abi'],
        'unpause',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'unpause' }
    : UseContractWriteConfig<
        typeof fungibleTokenWrapperABI,
        'unpause',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'unpause'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof fungibleTokenWrapperABI, 'unpause', TMode>({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'unpause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"unwrap"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperUnwrap<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof fungibleTokenWrapperAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof fungibleTokenWrapperABI,
          'unwrap'
        >['request']['abi'],
        'unwrap',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'unwrap' }
    : UseContractWriteConfig<
        typeof fungibleTokenWrapperABI,
        'unwrap',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'unwrap'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof fungibleTokenWrapperABI, 'unwrap', TMode>({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'unwrap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"unwrapAndSendTo"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperUnwrapAndSendTo<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof fungibleTokenWrapperAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof fungibleTokenWrapperABI,
          'unwrapAndSendTo'
        >['request']['abi'],
        'unwrapAndSendTo',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'unwrapAndSendTo'
      }
    : UseContractWriteConfig<
        typeof fungibleTokenWrapperABI,
        'unwrapAndSendTo',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'unwrapAndSendTo'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof fungibleTokenWrapperABI,
    'unwrapAndSendTo',
    TMode
  >({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'unwrapAndSendTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"unwrapFor"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperUnwrapFor<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof fungibleTokenWrapperAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof fungibleTokenWrapperABI,
          'unwrapFor'
        >['request']['abi'],
        'unwrapFor',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'unwrapFor' }
    : UseContractWriteConfig<
        typeof fungibleTokenWrapperABI,
        'unwrapFor',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'unwrapFor'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof fungibleTokenWrapperABI, 'unwrapFor', TMode>({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'unwrapFor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"updateLimit"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperUpdateLimit<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof fungibleTokenWrapperAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof fungibleTokenWrapperABI,
          'updateLimit'
        >['request']['abi'],
        'updateLimit',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'updateLimit'
      }
    : UseContractWriteConfig<
        typeof fungibleTokenWrapperABI,
        'updateLimit',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'updateLimit'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof fungibleTokenWrapperABI, 'updateLimit', TMode>(
    {
      abi: fungibleTokenWrapperABI,
      address:
        fungibleTokenWrapperAddress[
          chainId as keyof typeof fungibleTokenWrapperAddress
        ],
      functionName: 'updateLimit',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"wrap"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperWrap<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof fungibleTokenWrapperAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof fungibleTokenWrapperABI,
          'wrap'
        >['request']['abi'],
        'wrap',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'wrap' }
    : UseContractWriteConfig<typeof fungibleTokenWrapperABI, 'wrap', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'wrap'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof fungibleTokenWrapperABI, 'wrap', TMode>({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'wrap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"wrapFor"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperWrapFor<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof fungibleTokenWrapperAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof fungibleTokenWrapperABI,
          'wrapFor'
        >['request']['abi'],
        'wrapFor',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'wrapFor' }
    : UseContractWriteConfig<
        typeof fungibleTokenWrapperABI,
        'wrapFor',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'wrapFor'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof fungibleTokenWrapperABI, 'wrapFor', TMode>({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'wrapFor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"wrapForAndSendTo"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperWrapForAndSendTo<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof fungibleTokenWrapperAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof fungibleTokenWrapperABI,
          'wrapForAndSendTo'
        >['request']['abi'],
        'wrapForAndSendTo',
        TMode
      > & {
        address?: Address
        chainId?: TChainId
        functionName?: 'wrapForAndSendTo'
      }
    : UseContractWriteConfig<
        typeof fungibleTokenWrapperABI,
        'wrapForAndSendTo',
        TMode
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'wrapForAndSendTo'
      } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<
    typeof fungibleTokenWrapperABI,
    'wrapForAndSendTo',
    TMode
  >({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'wrapForAndSendTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function usePrepareFungibleTokenWrapperWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof fungibleTokenWrapperABI,
      TFunctionName
    >,
    'abi' | 'address'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof fungibleTokenWrapperABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"add"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function usePrepareFungibleTokenWrapperAdd(
  config: Omit<
    UsePrepareContractWriteConfig<typeof fungibleTokenWrapperABI, 'add'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'add',
    ...config,
  } as UsePrepareContractWriteConfig<typeof fungibleTokenWrapperABI, 'add'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"approve"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function usePrepareFungibleTokenWrapperApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof fungibleTokenWrapperABI, 'approve'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof fungibleTokenWrapperABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"burn"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function usePrepareFungibleTokenWrapperBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof fungibleTokenWrapperABI, 'burn'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof fungibleTokenWrapperABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"burnFrom"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function usePrepareFungibleTokenWrapperBurnFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof fungibleTokenWrapperABI, 'burnFrom'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'burnFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof fungibleTokenWrapperABI,
    'burnFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"decreaseAllowance"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function usePrepareFungibleTokenWrapperDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof fungibleTokenWrapperABI,
      'decreaseAllowance'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof fungibleTokenWrapperABI,
    'decreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"grantRole"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function usePrepareFungibleTokenWrapperGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof fungibleTokenWrapperABI, 'grantRole'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof fungibleTokenWrapperABI,
    'grantRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"increaseAllowance"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function usePrepareFungibleTokenWrapperIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof fungibleTokenWrapperABI,
      'increaseAllowance'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof fungibleTokenWrapperABI,
    'increaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"initialize"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function usePrepareFungibleTokenWrapperInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof fungibleTokenWrapperABI, 'initialize'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof fungibleTokenWrapperABI,
    'initialize'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"mint"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function usePrepareFungibleTokenWrapperMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof fungibleTokenWrapperABI, 'mint'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof fungibleTokenWrapperABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"pause"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function usePrepareFungibleTokenWrapperPause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof fungibleTokenWrapperABI, 'pause'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'pause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof fungibleTokenWrapperABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"remove"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function usePrepareFungibleTokenWrapperRemove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof fungibleTokenWrapperABI, 'remove'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'remove',
    ...config,
  } as UsePrepareContractWriteConfig<typeof fungibleTokenWrapperABI, 'remove'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"renounceRole"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function usePrepareFungibleTokenWrapperRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof fungibleTokenWrapperABI,
      'renounceRole'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof fungibleTokenWrapperABI,
    'renounceRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"revokeRole"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function usePrepareFungibleTokenWrapperRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof fungibleTokenWrapperABI, 'revokeRole'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof fungibleTokenWrapperABI,
    'revokeRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"setFee"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function usePrepareFungibleTokenWrapperSetFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof fungibleTokenWrapperABI, 'setFee'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'setFee',
    ...config,
  } as UsePrepareContractWriteConfig<typeof fungibleTokenWrapperABI, 'setFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"setFeeRecipient"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function usePrepareFungibleTokenWrapperSetFeeRecipient(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof fungibleTokenWrapperABI,
      'setFeeRecipient'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'setFeeRecipient',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof fungibleTokenWrapperABI,
    'setFeeRecipient'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"setHandler"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function usePrepareFungibleTokenWrapperSetHandler(
  config: Omit<
    UsePrepareContractWriteConfig<typeof fungibleTokenWrapperABI, 'setHandler'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'setHandler',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof fungibleTokenWrapperABI,
    'setHandler'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"setNativeAllowed"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function usePrepareFungibleTokenWrapperSetNativeAllowed(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof fungibleTokenWrapperABI,
      'setNativeAllowed'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'setNativeAllowed',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof fungibleTokenWrapperABI,
    'setNativeAllowed'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"transfer"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function usePrepareFungibleTokenWrapperTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof fungibleTokenWrapperABI, 'transfer'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof fungibleTokenWrapperABI,
    'transfer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"transferFrom"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function usePrepareFungibleTokenWrapperTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof fungibleTokenWrapperABI,
      'transferFrom'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof fungibleTokenWrapperABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"unpause"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function usePrepareFungibleTokenWrapperUnpause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof fungibleTokenWrapperABI, 'unpause'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'unpause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof fungibleTokenWrapperABI, 'unpause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"unwrap"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function usePrepareFungibleTokenWrapperUnwrap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof fungibleTokenWrapperABI, 'unwrap'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'unwrap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof fungibleTokenWrapperABI, 'unwrap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"unwrapAndSendTo"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function usePrepareFungibleTokenWrapperUnwrapAndSendTo(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof fungibleTokenWrapperABI,
      'unwrapAndSendTo'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'unwrapAndSendTo',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof fungibleTokenWrapperABI,
    'unwrapAndSendTo'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"unwrapFor"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function usePrepareFungibleTokenWrapperUnwrapFor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof fungibleTokenWrapperABI, 'unwrapFor'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'unwrapFor',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof fungibleTokenWrapperABI,
    'unwrapFor'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"updateLimit"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function usePrepareFungibleTokenWrapperUpdateLimit(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof fungibleTokenWrapperABI,
      'updateLimit'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'updateLimit',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof fungibleTokenWrapperABI,
    'updateLimit'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"wrap"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function usePrepareFungibleTokenWrapperWrap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof fungibleTokenWrapperABI, 'wrap'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'wrap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof fungibleTokenWrapperABI, 'wrap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"wrapFor"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function usePrepareFungibleTokenWrapperWrapFor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof fungibleTokenWrapperABI, 'wrapFor'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'wrapFor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof fungibleTokenWrapperABI, 'wrapFor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `functionName` set to `"wrapForAndSendTo"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function usePrepareFungibleTokenWrapperWrapForAndSendTo(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof fungibleTokenWrapperABI,
      'wrapForAndSendTo'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    functionName: 'wrapForAndSendTo',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof fungibleTokenWrapperABI,
    'wrapForAndSendTo'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link fungibleTokenWrapperABI}__.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof fungibleTokenWrapperABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    ...config,
  } as UseContractEventConfig<typeof fungibleTokenWrapperABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `eventName` set to `"Approval"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof fungibleTokenWrapperABI, 'Approval'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof fungibleTokenWrapperABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `eventName` set to `"Paused"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperPausedEvent(
  config: Omit<
    UseContractEventConfig<typeof fungibleTokenWrapperABI, 'Paused'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    eventName: 'Paused',
    ...config,
  } as UseContractEventConfig<typeof fungibleTokenWrapperABI, 'Paused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `eventName` set to `"RoleAdminChanged"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof fungibleTokenWrapperABI, 'RoleAdminChanged'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<
    typeof fungibleTokenWrapperABI,
    'RoleAdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `eventName` set to `"RoleGranted"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof fungibleTokenWrapperABI, 'RoleGranted'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<typeof fungibleTokenWrapperABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `eventName` set to `"RoleRevoked"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof fungibleTokenWrapperABI, 'RoleRevoked'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<typeof fungibleTokenWrapperABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `eventName` set to `"Transfer"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof fungibleTokenWrapperABI, 'Transfer'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof fungibleTokenWrapperABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link fungibleTokenWrapperABI}__ and `eventName` set to `"Unpaused"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x01eb50a7c42b525fa7c3bd340ab1f6f81257fe01)
 */
export function useFungibleTokenWrapperUnpausedEvent(
  config: Omit<
    UseContractEventConfig<typeof fungibleTokenWrapperABI, 'Unpaused'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof fungibleTokenWrapperAddress } = {} as any,
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: fungibleTokenWrapperABI,
    address:
      fungibleTokenWrapperAddress[
        chainId as keyof typeof fungibleTokenWrapperAddress
      ],
    eventName: 'Unpaused',
    ...config,
  } as UseContractEventConfig<typeof fungibleTokenWrapperABI, 'Unpaused'>)
}
